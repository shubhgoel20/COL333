#pragma once

#include "engine_base.hpp"
#include <atomic>


struct FeatureWts
{
    std::vector<float> value;
    const float pawn_wts[4][2][64] = 
            {
                {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
                {
                    {0.5,1,0,0,0,0,0,0,1.5,1,0,0,0,0,0,0,2,2,0,0,0,0,0,0,3,3,0,0,0,0,0,0,4,4,0,0,0,0,0,0,5,5,7,8,9,0,0,0,4.5,6,7,8,9,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,9,8,7,6,4.5,0,0,0,9,8,7,5,5,0,0,0,0,0,0,4,4,0,0,0,0,0,0,3,3,0,0,0,0,0,0,2,2,0,0,0,0,0,0,1,1.5,0,0,0,0,0,0,1,0.5,0,0,0,0,0,0,0,0,0}    
                },
                {
                    {4.5,4,3,2,1,0,0,0,5,4,3,2,1,0,0,0,6,6,0,0,0,0,0,0,7,7,0,0,0,0,0,0,8,8,0,0,0,0,0,0,9,9,0,0,0,0,0,0,10,10,12,13,14,15,0,0,10.5,11,12,13,14,15,0,0},
                    {0,0,15,14,13,12,11,10.5,0,0,15,14,13,12,10,10,0,0,0,0,0,0,9,9,0,0,0,0,0,0,8,8,0,0,0,0,0,0,7,7,0,0,0,0,0,0,6,6,0,0,0,1,2,3,4,5,0,0,0,1,2,3,4,4.5}    
                },
                {
                    {2,1,0,0,0,0,0,0,3,3,0,0,0,0,0,0,4,4,0,0,0,0,0,0,5,5,5,0,0,0,0,0,6,6,6,0,0,0,0,0,7,10,11,12,13,14,0,0,8,10,11,12,13,14,0,0,9,10,11,12,13,14,0,0},
                    {0,0,14,13,12,11,10,9,0,0,14,13,12,11,10,8,0,0,14,13,12,11,10,7,0,0,0,0,0,6,6,6,0,0,0,0,0,5,5,5,0,0,0,0,0,0,4,4,0,0,0,0,0,0,3,3,0,0,0,0,0,0,1,2}    
                }                
            };
    const float knight_wts[4][2][64] = 
            {
                {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
                {
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}    
                },
                {
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}    
                },
                {
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}    
                }                
            };
    const float rook_wts[4][2][64] = 
            {
                {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
                {
                    {2.5,0.5,0.5,0.5,0.5,0.5,0.5,0,2.5,0,0,0,0,1,1.5,0,2.5,2,0,0,0,1,1.5,0,2.5,2,0,0,0,1,1.5,0,2.5,2,0,0,0,1,1.5,0,2.5,2,3,3,3,3,1.5,0,3.5,3.5,3.5,3.5,3.5,3.5,1.5,0,0,0,0,0,0,0,0,0},
                    {1.5,3.5,3.5,3.5,3.5,3.5,3.5,0,1.5,3,3,3,3,2,2.5,0,1.5,1,0,0,0,2,2.5,0,1.5,1,0,0,0,2,2.5,0,1.5,1,0,0,0,2,2.5,0,1.5,1,0,0,0,0,2.5,0,0.5,0.5,0.5,0.5,0.5,0.5,2.5,0,0,0,0,0,0,0,0,0}    
                },
                {
                    {2.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,2.5,2,0,0,0,0,0,1.5,2.5,2,0,0,0,0,1,1.5,2.5,2,0,0,0,0,1,1.5,2.5,2,0,0,0,0,1,1.5,2.5,2,0,0,0,0,1,1.5,2.5,3,3,3,3,3,1,1.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,1.5},
                    {1.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,1.5,1,3,3,3,3,3,2.5,1.5,1,0,0,0,0,2,2.5,1.5,1,0,0,0,0,2,2.5,1.5,1,0,0,0,0,2,2.5,1.5,1,0,0,0,0,2,2.5,1.5,0,0,0,0,0,2,2.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,2.5}    
                },
                {
                    {2.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,2.5,1,1,1,1,1,0,0.5,2.5,2,0,0,0,0,0,0.5,2.5,2,0,0,0,0,0,0.5,2.5,2,0,0,0,0,0,0.5,2.5,2,0,0,0,0,0,0.5,2.5,3,3,3,3,3,3,0.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,1.5},
                    {1.5,3.5,3.5,3.5,3.5,3.5,3.5,3.5,0.5,3,3,3,3,3,3,2.5,0.5,0,0,0,0,0,2,2.5,0.5,0,0,0,0,0,2,2.5,0.5,0,0,0,0,0,2,2.5,0.5,0,0,0,0,0,2,2.5,0.5,0,1,1,1,1,1,2.5,1.5,1.5,1.5,1.5,1.5,1.5,1.5,2.5}    
                }                
            };
    const float bishop_wts[4][2][64] = 
            {
                {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
                {
                    {0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0}    
                },
                {
                    {0,0,0,1,0,0.5,0,0,0,0,0.75,1,0,0,0.75,0,0,0.5,0,0,0,0,0,1,0.25,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0.25,1,0,0,0,0,0,0.5,0,0,0.75,0,1,0,0.75,0,0,0,0,0.5,0,1,0,0,0},
                    {0,0,0,1,0,0.5,0,0,0,0,0.75,0,1,0,0.75,0,0,0.5,0,0,0,0,0,1,0.25,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0.25,1,0,0,0,0,0,0.5,0,0,0.75,0,0,1,0.75,0,0,0,0,0.5,0,1,0,0,0}    
                },
                {
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}    
                }                
            };
    FeatureWts()
    {
        value.push_back(-1000); //king check
        value.push_back(5000);  //bishop
        value.push_back(10000);  //rook
        value.push_back(6000);  //knight
        value.push_back(2000);  //pawn
        value.push_back(0);     //bishop*rook
        value.push_back(0);     //bishop*knight
        value.push_back(0);     //bishop*pawn
        value.push_back(0);     //rook*knight
        value.push_back(0);     //rook*pawn
        value.push_back(0);     //knight*pawn
        value.push_back(1);     //num of moves
        value.push_back(000);  //no bishop
        value.push_back(000);  //no rook
        value.push_back(000);  //no knight        
    }
};

struct PawnInfo
{
    U8 black_pawn_1;
    U8 black_pawn_2;
    U8 black_pawn_3;
    U8 black_pawn_4;

    U8 white_pawn_1;
    U8 white_pawn_2;
    U8 white_pawn_3;
    U8 white_pawn_4;
    PawnInfo(const Board& b)
    {
        black_pawn_1 = (b.data.b_pawn_1!=DEAD) ? b.data.board_0[b.data.b_pawn_1] : 0;
        black_pawn_2 = (b.data.b_pawn_2!=DEAD) ? b.data.board_0[b.data.b_pawn_2] : 0;
        black_pawn_3 = (b.data.b_pawn_3!=DEAD) ? b.data.board_0[b.data.b_pawn_3] : 0;
        black_pawn_4 = (b.data.b_pawn_4!=DEAD) ? b.data.board_0[b.data.b_pawn_4] : 0;

        white_pawn_1 = (b.data.w_pawn_1!=DEAD) ? b.data.board_0[b.data.w_pawn_1] : 0;
        white_pawn_2 = (b.data.w_pawn_2!=DEAD) ? b.data.board_0[b.data.w_pawn_2] : 0;
        white_pawn_3 = (b.data.w_pawn_3!=DEAD) ? b.data.board_0[b.data.w_pawn_3] : 0;
        white_pawn_4 = (b.data.w_pawn_4!=DEAD) ? b.data.board_0[b.data.w_pawn_4] : 0;
    }

};

class Engine : public AbstractEngine {

    // add extra items here. 
    // Note that your engine will always be instantiated with the default 
    // constructor.

    PlayerColor my_player;
    FeatureWts weights;
    int call_count=0;
    bool do_quescence;
    public:
    void find_best_move(const Board& b) override;
    float maxval(const Board& b, int curr_depth,int max_depth, float alpha, float beta);
    float minval(const Board& b, int curr_depth,int max_depth, float alpha, float beta);
    U16 minimax(const Board& b, int max_depth);

    int rook_count(const Board&b,PlayerColor color, PawnInfo& pi);
    int bishop_count(const Board&b,PlayerColor color, PawnInfo& pi);
    int pawn_count(const Board&b,PlayerColor color, PawnInfo& pi);
    int knight_count(const Board&b,PlayerColor color, PawnInfo& pi);
    int king_in_check(const Board&b, PlayerColor color);
    void feature_values(const Board& b, std::vector<int>& ans,PawnInfo& pi);
    float state_value(const Board& b, int depth);

    std::string state_Encoding(const Board& b, unsigned char depth, PlayerColor player); //0-white, 1-black


    float minval_quescence(const Board& b, float alpha, float beta, int curr_depth);
    float maxval_quescence(const Board& b, float alpha, float beta, int curr_depth);
    float quescence_search(const Board& b, int curr_depth, int alpha, int beta);
    float pawn_structure(const Board& b, PlayerColor color, PawnInfo& pi);
    float rook_structure(const Board& b, PlayerColor color, PawnInfo& pi);
    float knight_structure(const Board& b, PlayerColor color, PawnInfo& pi);
    float bishop_structure(const Board& b, PlayerColor color, PawnInfo& pi);
};
